#+TITLE: My (Spac)Emacs Configuration 
#+AUTHOR: Nicholas Scheurich

* Personal information

Tell Emacs a little bit about myself.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Nicholas Gunther Scheurich"
        user-mail-address "nick@scheurich.me")
#+END_SRC

* Core initialization

Spacemacs initialization function. This is called by Spacemacs on init, prior to
layers configuration. The most noteworthy bit is the the font settingâ€”
[[https://github.com/chrissimpkins/Hack][Input Mono]] at 14 px.

#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/init ()
    (setq-default
     dotspacemacs-elpa-https t
     dotspacemacs-elpa-timeout 5
     dotspacemacs-check-for-update nil
     dotspacemacs-elpa-subdirectory nil
     dotspacemacs-editing-style 'vim
     dotspacemacs-verbose-loading nil
     dotspacemacs-startup-banner 'official
     dotspacemacs-startup-lists '((recents . 5)
                                  (projects . 7))
     dotspacemacs-startup-buffer-responsive t
     dotspacemacs-scratch-mode 'text-mode
     dotspacemacs-themes '(spacemacs-dark
                           spacemacs-light)
     dotspacemacs-colorize-cursor-according-to-state t
     dotspacemacs-default-font '("Fira Code"
                                 :size 13
                                 :weight normal
                                 :width normal
                                 :powerline-scale 1.45)
     dotspacemacs-leader-key "SPC"
     dotspacemacs-emacs-leader-key "M-m"
     dotspacemacs-major-mode-leader-key ","
     dotspacemacs-major-mode-emacs-leader-key "C-M-m"
     dotspacemacs-emacs-command-key "SPC"
     dotspacemacs-distinguish-gui-tab nil
     dotspacemacs-remap-Y-to-y$ nil
     dotspacemacs-retain-visual-state-on-shift t
     dotspacemacs-visual-line-move-text nil
     dotspacemacs-ex-substitute-global nil
     dotspacemacs-default-layout-name "Default"
     dotspacemacs-display-default-layout nil
     dotspacemacs-auto-resume-layouts nil
     dotspacemacs-large-file-size 1
     dotspacemacs-auto-save-file-location 'cache
     dotspacemacs-max-rollback-slots 5
     dotspacemacs-helm-resize nil
     dotspacemacs-helm-no-header nil
     dotspacemacs-helm-position 'bottom
     dotspacemacs-helm-use-fuzzy 'always
     dotspacemacs-enable-paste-transient-state nil
     dotspacemacs-which-key-delay 0.4
     dotspacemacs-which-key-position 'bottom
     dotspacemacs-loading-progress-bar t
     dotspacemacs-fullscreen-at-startup nil
     dotspacemacs-fullscreen-use-non-native 1
     dotspacemacs-maximized-at-startup nil
     dotspacemacs-active-transparency 90
     dotspacemacs-inactive-transparency 90
     dotspacemacs-show-transient-state-title t
     dotspacemacs-show-transient-state-color-guide t
     dotspacemacs-mode-line-unicode-symbols t
     dotspacemacs-smooth-scrolling t
     dotspacemacs-line-numbers nil
     dotspacemacs-folding-method 'evil
     dotspacemacs-smartparens-strict-mode nil
     dotspacemacs-smart-closing-parenthesis nil
     dotspacemacs-highlight-delimiters 'all
     dotspacemacs-persistent-server nil
     dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
     dotspacemacs-default-package-repository nil
     dotspacemacs-whitespace-cleanup nil
     ))
#+END_SRC

* User initialization

This function is called by Spacemacs just after `dotspacemacs/init' and before
layers configuration, making it the ideal spot for variables that need to be set
before packages are loaded.

#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/user-init ()
    (custom-set-variables '(spacemacs-theme-custom-colors
                            '((bg1           . "#1f1f1f")
                              (bg2           . "#191919")
                              (comment-bg    . "#1f1f1f")
                              (type          . "#ff5370")
                              (base          . "#e2ebe5")
                              (keyword       . "#7db0c5")
                              (str           . "#9ec99e")
                              (func          . "#b06698")
                              (comment       . "#929c95")
                              (const         . "#daa0c7")
                              (var           . "#f8a663")
                              (border        . "#151515")
                              (act2          . "#151515")
                              (act1          . "#151515")
                              (highlight     . "#2e2c2c")
                              (highlight-dim . "#2e2c2c")))))
#+END_SRC

* Layers

** Layers to load

Select what layers I'd like to load. These include layers shipped with Spacemacs
as well as custom layers I've created.

#+BEGIN_SRC emacs-lisp
    (defun ngs/configuration-layers ()
        '(
          ;; +checkers
          syntax-checking

          ;; +completion
          (auto-completion :variables
                           auto-completion-enable-snippets-in-popup t
                           auto-completion-complete-with-key-sequence "jk")

          ;; +emacs
          org

          ;; +frameworks
          ruby-on-rails react

          ;; +languages
          c-c++ csharp clojure elixir emacs-lisp haskell html
          javascript markdown ruby shell-scripts sql typescript yaml

          ;; +os
          osx

          ;; +source control
          git github version-control

          ;; +tools
          dash ranger restclient
          (shell :variables
                 shell-default-height 30
                 shell-default-position 'bottom)

          ;; +web-services
          spotify))
#+END_SRC

** Additional layer options

Select any non-layer-wrapped packages that should be loaded, define packages
that should not recieve updates, and exclude certain packages from being
installed and loaded.

#+BEGIN_SRC emacs-lisp
  (defun ngs/additional-packages ()
    '(all-the-icons
      prettier-js))
  (defun ngs/frozen-packages ()
    '())
  (defun ngs/excluded-packages ()
    '())
#+END_SRC

** Layer configuration function

Finally, define the function that Spacemacs will use to configure its layer
behavior. Use the `spacemacs' distribution layer, lazy-load unused layers
(with confirmation), and set up additional layer paths (none currently in use).
Then, load the rest of our layer configuration.

#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/layers ()
    (setq-default
     dotspacemacs-distribution              'spacemacs
     dotspacemacs-enable-lazy-installation  'unused
     dotspacemacs-ask-for-lazy-installation t
     dotspacemacs-configuration-layer-path  '()
     dotspacemacs-configuration-layers      (ngs/configuration-layers)
     dotspacemacs-additional-packages       (ngs/additional-packages)
     dotspacemacs-frozen-packages           (ngs/frozen-packages)
     dotspacemacs-excluded-packages         (ngs/excluded-packages)
     dotspacemacs-install-packages          'used-only))
#+END_SRC

* User configuration

This is where /most/ user-defined behavior should go (see: [[User initialization]]).

** Emacs

Settings for Emacs that are not necessarily specific to Spacemacs.

#+BEGIN_SRC emacs-lisp
  (defun ngs/user-configuration-emacs ()
    (setq-default
     custom-file "~/.emacs.d/private/custom.el"
     dotspacemacs-persistent-server t)
    (mac-auto-operator-composition-mode))
#+END_SRC

** Packages

Settings for Emacs packages.

   #+BEGIN_SRC emacs-lisp
     (defun ngs/user-configuration-packages ()
       (setq css-indent-offset 2)
       (setq js-indent-level 2)
       (setq web-mode-css-indent-offset 2)
       (setq web-mode-code-indent-offset 2)
       (setq web-mode-markup-indent-offset 2)
       (setq web-mode-enable-engine-detection t)
       (add-hook 'js2-mode-hook 'prettier-js-mode)
       (add-hook 'web-mode-hook 'prettier-js-mode))
   #+END_SRC
** User interface

Settings that affect the editor UI, e.g. mode line, neotree, line numbering.

#+BEGIN_SRC emacs-lisp
  (defun ngs/user-configuration-ui ()
    (setq-default
     neo-theme 'icons
     linum-relative-format "%4s "
     powerline-default-separator 'nil
     line-spacing 2)

    (linum-relative-mode)
    (vi-tilde-fringe-mode))
#+END_SRC

** Keybindings

Settings that change how input works.

#+BEGIN_SRC emacs-lisp
  (defun ngs/user-configuration-keybindings ()
    ;; Use +/-/0 to zoom the frame in and out.
    (global-unset-key (kbd "C-x C-="))
    (global-set-key (kbd "C-x C-=") 'spacemacs/zoom-frm-in)
    (global-unset-key (kbd "C-x C--"))
    (global-set-key (kbd "C-x C--") 'spacemacs/zoom-frm-out)
    (global-unset-key (kbd "C-x C-0"))
    (global-set-key (kbd "C-x C-0") 'spacemacs/zoom-frm-unzoom))
#+END_SRC

** User configuration function

Function that Spacemacs calls at the very end of initialization. First, run the
above-defined functions, then define some miscellaneous functions that don't fit
into any particular package, and, lastly, load the custom file and recompile the
mode line.

#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/user-config ()
    (ngs/user-configuration-emacs)
    (ngs/user-configuration-packages)
    (ngs/user-configuration-ui)
    (ngs/user-configuration-keybindings)

    ;; TODO This should run automatically during initialization
    (defun ngs/set-face-attributes ()
      (interactive)
      ;; (set-face-attribute 'linum nil :foreground "#43535a")
      ;; (set-face-attribute 'linum nil :background "#263238")
      ;; (set-face-attribute 'linum-relative-current-face nil :foreground "#708088")
      ;; (set-face-attribute 'linum-relative-current-face nil :background "#263238")
      ;; (set-face-attribute 'mode-line nil :box `(:line-width 2 :color "#20272c"))
      ;; (set-face-attribute 'mode-line-inactive  nil :background "#222d33")
      ;; (set-face-attribute 'powerline-inactive1 nil :background "#222d33")
      ;; (set-face-attribute 'powerline-inactive2 nil :background "#222d33")
      ;; (set-face-attribute 'mode-line-inactive  nil :box `(:line-width 2 :color "#222d33"))
      )

    (load custom-file)
    (spaceline-compile))
#+END_SRC

* Outro

Â¡Todo listo!
