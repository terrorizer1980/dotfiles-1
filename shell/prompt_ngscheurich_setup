#
# A simple theme that displays relevant, contextual information.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#   Nicholas Scheurich <nick@scheurich.me>
#
# Based on superlinh by linhmtran168:
#   https://github.com/linhmtran168/mac_dotfiles
#

# Load dependencies.
pmodload 'helper'

function prompt_sorin_precmd {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS

  # Get Git repository information.
  if (( $+functions[git-info] )); then
    git-info
  fi
  
  search_path=$PWD
  tool_versions_file=""

  while [[ $search_path != "/" && $search_path != $HOME && $tool_versions_file = "" ]]; do
    result=$(find $search_path -maxdepth 1 -name ".tool-versions")
    if [[ $result != "" ]]; then
        tool_versions_file="$search_path/.tool-versions"
    else
        search_path="$(dirname "$search_path")"
    fi
  done
  unset search_path

  tool_versions=()
  if [[ $tool_versions_file != "" ]]; then
    while read line; do
      tool=$(echo $line | sed 's/^\([^ ]*\) \(.*\)/\1/')
      # version=$(echo $line | sed 's/^\([^ ]*\) \(.*\)/\2/'n)
      case $tool in
        erlang)
          tool_versions[$(($#tool_versions+1))]="%F{red}erl:$(asdf which erlang)";;
        elixir)
          tool_versions[$(($#tool_versions+1))]="%F{magenta}ex:$(asdf which elixir)";;
        nodejs)
          tool_versions[$(($#tool_versions+1))]="%F{green}js:$(asdf which nodejs)";;
        python)
          tool_versions[$(($#tool_versions+1))]="%F{yellow}py:$(asdf which python)";;
        ruby)
          tool_versions[$(($#tool_versions+1))]="%F{red}rb:$(asdf which ruby)";;
      esac
    done < $tool_versions_file
  fi
}

function prompt_sorin_setup {
  setopt LOCAL_OPTIONS
  unsetopt XTRACE KSH_ARRAYS
  prompt_opts=(cr percent subst)

  # Load required functions.
  autoload -Uz add-zsh-hook

  # Add hook for calling git-info before each command.
  add-zsh-hook precmd prompt_sorin_precmd

  # Set editor-info parameters.
  zstyle ':prezto:module:editor:info:completing' format '%B%F{red}...%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary' format '%F{red}❯%F{yellow}❯%F{green}❯%f%b'
  zstyle ':prezto:module:editor:info:keymap:primary:overwrite' format ' %F{red}♺%f'
  zstyle ':prezto:module:editor:info:keymap:alternate' format ' %B%F{green}❮%F{yellow}❮%F{red}❮%f%b'

  # Set git-info parameters.
  zstyle ':prezto:module:git:info' verbose 'yes'
  zstyle ':prezto:module:git:info:action' format ':%%B%F{yellow}%s%f%%b'
  zstyle ':prezto:module:git:info:added' format ' %%B%F{green}✚%f%%b'
  zstyle ':prezto:module:git:info:ahead' format ' %%B%F{yellow}⬆%f%%b'
  zstyle ':prezto:module:git:info:behind' format ' %%B%F{yellow}⬇%f%%b'
  zstyle ':prezto:module:git:info:branch' format ':%F{green}%b%f'
  zstyle ':prezto:module:git:info:commit' format ':%F{green}%.7c%f'
  zstyle ':prezto:module:git:info:deleted' format ' %%B%F{red}✖%f%%b'
  zstyle ':prezto:module:git:info:modified' format ' %%B%F{blue}✱%f%%b'
  zstyle ':prezto:module:git:info:position' format ':%F{red}%p%f'
  zstyle ':prezto:module:git:info:renamed' format ' %%B%F{magenta}➜%f%%b'
  zstyle ':prezto:module:git:info:stashed' format ' %%B%F{cyan}✭%f%%b'
  zstyle ':prezto:module:git:info:unmerged' format ' %%B%F{yellow}═%f%%b'
  zstyle ':prezto:module:git:info:untracked' format ' %%B%F{white}◼%f%%b'
  zstyle ':prezto:module:git:info:keys' format \
    'prompt' '(%F{blue}git%f$(coalesce "%b" "%p" "%c")%s)' \
    'rprompt' '%A%B%S%a%d%m%r%U%u'

  # Define prompts.
  PROMPT='
%F{cyan}%n@%F{white}%m%f %F{cyan}%~%f $tool_versions
%(!. %B%F{red}#%f%b.)${editor_info[keymap]} '
  RPROMPT='${editor_info[overwrite]}%(?:: %F{red}⏎%f)${VIM:+" %B%F{green}V%f%b"}${git_info[rprompt]} ${git_info:+${(e)git_info[prompt]}} %F{white}[%*]'
  SPROMPT='zsh: correct %F{red}%R%f to %F{green}%r%f [nyae]? '
}

prompt_sorin_setup "$@"

zstyle ':prezto:module:editor:info:keymap:primary' format '%F{white}%%%f'
zstyle ':prezto:module:editor:info:keymap:alternate' format '%F{cyan}-%f'
