#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("/Users/nscheurich/Web/boxcab/" ("about                                # List versions of all Rails frameworks and the environment" "assets:clean[keep]                   # Remove old compiled assets" "assets:clobber                       # Remove compiled assets" "assets:environment                   # Load asset compile environment" "assets:precompile                    # Compile all the assets named in config.assets.precompile" "autoprefixer:info                    # Show selected browsers and prefixed CSS properties and values" "bourbon:install[sass_path]           # Move files to the Rails assets directory" "bourbon:neat:install[sass_path]      # Copy Neat's files to the Rails assets directory" "bundler:audit                        # Updates the ruby-advisory-db and runs audit" "cache_digests:dependencies           # Lookup first-level dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "cache_digests:nested_dependencies    # Lookup nested dependencies for TEMPLATE (like messages/show or comments/_comment.html)" "clearance_engine:install:migrations  # Copy migrations from clearance_engine to application" "db:_dump                             # " "db:abort_if_pending_migrations       # " "db:charset                           # " "db:collation                         # " "db:create                            # Creates the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:create:all to create all databases in the config)" "db:create:all                        # " "db:drop                              # Drops the database from DATABASE_URL or config/database.yml for the current RAILS_ENV (use db:drop:all to drop all databases in the config)" "db:drop:all                          # " "db:fixtures:identify                 # " "db:fixtures:load                     # Load fixtures into the current environment's database" "db:forward                           # " "db:load_config                       # " "db:migrate                           # Migrate the database (options: VERSION=x, VERBOSE=false, SCOPE=blog)" "db:migrate:down                      # " "db:migrate:redo                      # " "db:migrate:reset                     # " "db:migrate:status                    # Display status of migrations" "db:migrate:up                        # " "db:purge                             # " "db:purge:all                         # " "db:reset                             # " "db:rollback                          # Rolls the schema back to the previous version (specify steps w/ STEP=n)" "db:schema:cache:clear                # Clear a db/schema_cache.dump file" "db:schema:cache:dump                 # Create a db/schema_cache.dump file" "db:schema:dump                       # Create a db/schema.rb file that is portable against any DB supported by AR" "db:schema:load                       # Load a schema.rb file into the database" "db:schema:load_if_ruby               # " "db:seed                              # Load the seed data from db/seeds.rb" "db:setup                             # Create the database, load the schema, and initialize with the seed data (use db:reset to also drop the database first)" "db:structure:dump                    # Dump the database structure to db/structure.sql" "db:structure:load                    # Recreate the databases from the structure.sql file" "db:structure:load_if_sql             # " "db:test:clone                        # " "db:test:clone_schema                 # " "db:test:clone_structure              # " "db:test:deprecated                   # " "db:test:load                         # " "db:test:load_schema                  # " "db:test:load_structure               # " "db:test:prepare                      # " "db:test:purge                        # " "db:version                           # Retrieves the current schema version number" "default                              # " "dev:prime                            # Sample data for local development environment" "doc                                  # " "doc/app                              # " "doc/app/created.rid                  # " "doc:app                              # Generate docs for the app -- also available doc:rails, doc:guides (options: TEMPLATE=/rdoc-template.rb, TITLE=\"Custom Title\")" "doc:clobber                          # " "doc:clobber_app                      # " "doc:clobber_rails                    # " "doc:guides                           # " "doc:rails                            # " "doc:reapp                            # " "doc:rerails                          # " "environment                          # " "html                                 # " "html/created.rid                     # " "jobs:check[max_age]                  # Exit with error status if any jobs older than max_age seconds haven't been attempted yet" "jobs:clear                           # Clear the delayed_job queue" "jobs:environment_options             # " "jobs:work                            # Start a delayed_job worker" "jobs:workoff                         # Start a delayed_job worker and exit when all available jobs are complete" "log:clear                            # Truncates all *.log files in log/ to zero bytes (specify which logs with LOGS=test,development)" "middleware                           # Prints out your Rack middleware stack" "newrelic:install                     # Install a default config/newrelic.yml file" "newrelic:thanks                      # Gratefulness is always appreciated" "notes                                # Enumerate all annotations (use notes:optimize, :fixme, :todo for focus)" "notes:custom                         # Enumerate a custom annotation, specify with ANNOTATION=CUSTOM" "notes:fixme                          # " "notes:optimize                       # " "notes:todo                           # " "rails:template                       # Applies the template supplied by LOCATION=(/path/to/template) or URL" "rails:templates:copy                 # " "rails:update                         # Update configs and some other initially generated files (or use just update:configs or update:bin)" "rails:update:bin                     # " "rails:update:configs                 # " "railties:install:migrations          # " "rollbar:test                         # Verify your gem installation by sending a test exception to Rollbar" "routes                               # Print out all defined routes in match order, with names" "secret                               # Generate a cryptographically secure secret key (this is typically used to generate a secret for cookie sessions)" "spec                                 # Run RSpec code examples" "spec:features                        # Run the code examples in spec/features" "spec:models                          # Run the code examples in spec/models" "spec:prepare                         # " "spec:statsetup                       # " "stats                                # Report code statistics (KLOCs, etc) from the application or engine" "time:zones:all                       # Displays all time zones, also available: time:zones:us, time:zones:local -- filter with OFFSET parameter, e.g., OFFSET=-6" "time:zones:local                     # " "time:zones:us                        # " "tmp                                  # " "tmp/cache                            # " "tmp/cache/assets                     # " "tmp/cache/assets/development         # " "tmp/cache/assets/production          # " "tmp/cache/assets/test                # " "tmp/pids                             # " "tmp/sessions                         # " "tmp/sockets                          # " "tmp:cache:clear                      # " "tmp:clear                            # Clear session, cache, and socket files from tmp/ (narrow w/ tmp:sessions:clear, tmp:cache:clear, tmp:sockets:clear)" "tmp:create                           # Creates tmp directories for sessions, cache, sockets, and pids" "tmp:pids:clear                       # " "tmp:sessions:clear                   # " "tmp:sockets:clear                    # ")))