"                 __
"  __          __/\ \__               __
" /\_\    ___ /\_\ \ ,_\      __  __ /\_\    ___ ___
" \/\ \ /' _ `\/\ \ \ \/     /\ \/\ \\/\ \ /' __` __`\
"  \ \ \/\ \/\ \ \ \ \ \_  __\ \ \_/ |\ \ \/\ \/\ \/\ \
"   \ \_\ \_\ \_\ \_\ \__\/\_\\ \___/  \ \_\ \_\ \_\ \_\
"    \/_/\/_/\/_/\/_/\/__/\/_/ \/__/    \/_/\/_/\/_/\/_/
"
"
" Author: N. G. Scheurich <nick@scheurich.me>
" Repo: https://github.com/ngscheurich/dotfiles

" Last added:
" - prettier
" - gruvbox
"
" - vim-test
" - trailertrash.vim
"
" - vinegar
"
" - srcery
"
" - jsx pretty

" {{{ Plugin List ----------------------------------------------------------------------------------
call plug#begin('~/.local/share/nvim/plugged')
Plug 'csexton/trailertrash.vim'       " Identify and irradicate unwanted EOL whitespace
Plug 'janko-m/vim-test'               " Run your tests at the speed of thought
" Plug 'justinmk/vim-sneak'            " Jump to any location specified by two characters
" Plug 'ludovicchabant/vim-gutentags'  " Manages/updates tag files
" Plug 'machakann/vim-highlightedyank' " Make the yanked region apparent
Plug 'maxmellon/vim-jsx-pretty'      " JSX syntax highlighting
" Plug 'mhinz/vim-startify'            " Fancy start screen
Plug 'morhetz/gruvbox'               " Retro groove color scheme
" Plug 'ryanoasis/vim-devicons'        " Adds file type glyphs/icons to popular Vim plugins
" Plug 'scrooloose/nerdtree'           " Tree explorer plugin
Plug 'sheerun/vim-polyglot'           " On-demand language support
Plug 'slashmili/alchemist.vim'        " Elixir integration
Plug 'srcery-colors/srcery-vim'      " Srcerous colors
" Plug 'tpope/vim-abolish'             " Operate on variants of a word (plural, case, etc.)
Plug 'tpope/vim-commentary'          " Toggle comments
" Plug 'tpope/vim-dispatch'            " Perform async tasks in a tmux split
" Plug 'tpope/vim-endwise'             " End coding structures automatically, e.g., `do`...`end`
" Plug 'tpope/vim-fugitive'            " Git integration
" Plug 'tpope/vim-sensible'            " Defaults everyone can agree on
" Plug 'tpope/vim-sleuth'              " Heuristically set buffer indentation options
" Plug 'tpope/vim-speeddating'         " Use CTRL-A/CTRL-X to increment dates, times, and more
" Plug 'tpope/vim-surround'            " Operate on surroundings, e.g., parentheses, brackets, quotes
" Plug 'tpope/vim-unimpaired'          " Complementary key mappings based around [ and ]
Plug 'tpope/vim-vinegar'             " Navigate up a directory in netrw
Plug 'vim-airline/vim-airline'       " Lean and mean status/tab line
Plug 'w0rp/ale'                      " Asynchronous linting/fixing with LSP integration

" Dark powered plugin to unite all interfaces
Plug 'Shougo/denite.nvim',
      \{ 'do': ':UpdateRemotePlugins' }

" Dark powered asynchronous completion framework
Plug 'Shougo/deoplete.nvim',
      \{ 'do': ':UpdateRemotePlugins' }

" Typescript tooling
Plug 'mhartington/nvim-typescript',
      \{'do': './install.sh'}

" Plugin for Prettier
Plug 'prettier/vim-prettier',
      \{'do': 'yarn install' }

" Simple tmux statusline generator
" Should only enable to update snapshot
" Plug 'edkolev/tmuxline.vim'
call plug#end()
" }}} ----------------------------------------------------------------------------------------------
" {{{ Plugin Config --------------------------------------------------------------------------------
let g:startify_custom_header =
            \ map(split(system('cat ~/.config/nvim/banner.txt'), '\n'), '"   ". v:val')

let g:srcery_italic = 1

let g:deoplete#enable_at_startup = 1

let g:gruvbox_italic = 1
let g:gruvbox_contrast_dark = 'hard'

let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 0

let NERDTreeShowHidden = 1

call denite#custom#var('file/rec', 'command',
            \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
            \ [ '.git/', 'node_modules/', 'build/', 'dist/', 'deps/' ])
call denite#custom#map('insert', '<Down>',
            \ '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<Up>',
            \ '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('insert', '<C-v>',
            \ '<denite:do_action:vsplit>', 'noremap')
call denite#custom#map('insert', '<C-x>',
            \ '<denite:do_action:split>', 'noremap')

let test#strategy = "neovim"

let g:netrw_banner = 0

let g:ale_sign_error = '㤮 '
let g:ale_sign_warning = '⚠ '
let g:ale_linters = {}
let g:ale_linters['elixir'] = ['mix']
let g:ale_fixers = {}
let g:ale_fixers['elixir'] = ['mix_format']
let g:ale_fix_on_save = 1
" }}} ----------------------------------------------------------------------------------------------
" {{{ Settings -------------------------------------------------------------------------------------
syntax enable         " Enable syntax processing
colorscheme gruvbox   " Use gruvbox

set background=dark   " Use light-on-dark colors
set cursorline        " Highlight current line
set expandtab         " Insert proper amount of spaces in Insert mode
set fillchars+=vert:│ " Customize split borders
set foldenable        " Enable folding
set foldlevelstart=5  " Maximum fold depth open by default
set foldnestmax=10    " Maximum allowed fold depth
set ignorecase        " Ignore case when searching
set inccommand=split  " Preview substitutions in a temporary split
set noshowmode        " Don't display editing mode (vim-airline shows this)
set noswapfile        " Don't use swapfiles
set nowritebackup     " Don't create a backup before writing a file
set number            " Show line numbers
set relativenumber    " Show relative line numbers
set shiftwidth=2      " Number of spaces to use for each step of (auto)indent
set signcolumn=yes    " Show signs to the left of line numbers
set smartcase         " Ignore case when searching lowercase
set smartindent       " Intelligently indent new lines
set softtabstop=2     " Number of spaces per <Tab> while editing
set splitbelow        " Open horizontal splits below current window
set splitright        " Open vertical splits to the right of the current window
set tabstop=2         " Number of spaces per <Tab>
set termguicolors     " Use 24-bit color if the terminal supports it
" }}} ----------------------------------------------------------------------------------------------
" {{{ Colors ---------------------------------------------------------------------------------------{{{}}}
highlight ALEErrorSign guibg=clear guifg=#FF5370
highlight ALEWarningSign guibg=clear guifg=#F8A663
highlight SignColumn guibg=clear
highlight CursorLine guibg=#282828
" }}} ----------------------------------------------------------------------------------------------
" {{{ Keybindings ----------------------------------------------------------------------------------
let mapleader = ","

imap jk <ESC>
inoremap <expr><S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr><Tab> pumvisible() ? "\<C-n>" : "\<Tab>"

nmap <ESC> :noh<CR>
nmap <Leader>/ :Denite grep
nmap <Leader>\ :NERDTreeToggle<CR>
nmap <Leader>b :Denite buffer<CR>
nmap <Leader>f :Denite file/rec<CR>
nmap <Leader>m :silent make<CR>
nmap <S-Tab> :tabprev<CR>
nmap <Tab> :tabnext<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-g> :TestVisit<CR>
nmap <silent> t<C-t> :TestLast<CR>
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-s> :TestSuite<CR>
" }}} ----------------------------------------------------------------------------------------------
" {{{ Autocommands ---------------------------------------------------------------------------------
augroup filetypes
    autocmd!
    " autocmd FileType ruby map <Leader>s :call RunCurrentSpecFile()
    " autocmd FileType typescript noremap <Leader>] :TSDef<CR>
    autocmd FileType vim setlocal tabstop=4 softtabstop=4 shiftwidth=4 foldmethod=marker foldlevel=0
augroup END

let g:prettier#autoformat = 0
augroup prettier
  autocmd!
  autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue PrettierAsync
augroup END

" augroup nerdtree
"   autocmd!
"   autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" augroup END
" }}} ----------------------------------------------------------------------------------------------
